{"version":3,"sources":["Header.js","ChooseAType.js","YourSuggestion.js","AddSuggestion.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","this","props","header","React","Component","ChooseAType","submitForm","event","preventDefault","console","log","target","type","value","getSuggestion","parseInt","favourite","checked","luckySuggestion","onSubmit","defaultValue","id","name","disabled","types","map","key","typeId","htmlFor","aria-hidden","role","aria-label","onClick","YourSuggestion","handleDelete","deleteSuggestionFunc","suggestion","addFavourite","addFavouriteFunc","getAssociation","getAssociationFunc","associations","association","i","AddSuggestion","state","updateSuggestion","setState","charAt","toUpperCase","slice","updateTypeId","updateFavourite","addSuggestion","addSuggestionFunc","currentTarget","suggestionText","onChange","required","placeholder","App","axios","get","then","response","data","items","item","newSuggestion","post","catch","err","deleteSuggestion","delete","put","filteredSuggestion","favouriteSuggestion","tasks","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cf55ad89.chunk.js","sourcesContent":["import React from 'react';\n\nclass Header extends React.Component {\n    render () {\n        return (\n            <div className=\"top-space\">\n            <h4>{this.props.header}</h4>\n            </div>\n        )\n    }\n}\n\nexport default Header;","import React from 'react';\n\n\n\nclass ChooseAType extends React.Component {\n\n\n    submitForm = (event) => {\n        event.preventDefault();\n        console.log(event.target.type.value);\n        this.props.getSuggestion(parseInt(event.target.type.value), event.target.favourite.checked);\n    };\n\n    luckySuggestion = () => {\n        this.props.luckySuggestion();\n    };\n\n    render() {\n        return (\n            <form onSubmit={this.submitForm}>\n                <fieldset>\n                    <div>\n                        <div>\n                            <select defaultValue=\"\" id=\"type\" name=\"type\" className=\"bottom-space\">\n                                <option value=\"\" disabled>Choose your type</option>\n                                {this.props.types.map(type =>\n                                    <option key={type.typeId} value={type.typeId}>{type.type}</option>)}\n\n                            </select>\n\n\n                            <div className=\"custom-sq\">\n                                <input type=\"checkbox\" id=\"box3\" name=\"favourite\"/>\n                                <label htmlFor=\"box3\"><i className=\"fa fa-heart green-text\" aria-hidden=\"true\"></i></label>\n                            </div>\n\n                            <div className=\"btn-group left-space bottom-space\" role=\"group\" aria-label=\"Choose Suggestion Buttons\">\n                            <button type=\"submit\" className=\"btn btn-outline-success btn-sm left-space\">Choose</button>\n                            <button onClick={this.luckySuggestion} type=\"button\" className=\"btn btn-outline-success btn-sm left-space\">Lucky Dip!</button>\n                            </div>  \n                       \n                        </div>\n                    </div>\n                </fieldset>\n            </form>\n\n\n\n\n\n        )\n    }\n}\n\nexport default ChooseAType;","import React from 'react';\n\n\nclass YourSuggestion extends React.Component {\n\n    handleDelete = () => {\n        this.props.deleteSuggestionFunc(this.props.suggestion.id);\n    }\n\n    addFavourite = () => {\n        this.props.addFavouriteFunc(this.props.suggestion.id);\n    }\n\n    getAssociation = () => {\n        this.props.getAssociationFunc();\n    }\n\n\n    render() {\n        return (\n            <div>\n                {\n                    this.props.suggestion && this.props.suggestion.suggestion && (\n                        <div >\n                            <div className=\"bottom-space\">{this.props.suggestion.suggestion}</div>\n                            <div className=\"btn-group left-space bottom-space\" role=\"group\" aria-label=\"Suggestion Buttons\">\n                                <button onClick={this.addFavourite} type=\"button\" className=\"btn btn-outline-success btn-sm\"><i className=\"fa fa-heart\" aria-hidden=\"true\"></i></button>\n                                <button onClick={this.handleDelete} type=\"button\" className=\"btn btn-outline-success btn-sm\"><i className=\"fa fa-times\" aria-hidden=\"true\"></i></button>\n                                <button onClick={this.getAssociation} type=\"button\" className=\"btn btn-outline-success btn-sm\">Associate</button>\n                            </div>\n                            <ul className=\"associations-list\">{this.props.associations.map((association,i) => <li key={i}> {association}</li>)}</ul>\n                        </div>)\n                }\n            </div>\n\n\n\n\n        )\n    }\n}\n\nexport default YourSuggestion;","import React from 'react';\n\nclass AddSuggestion extends React.Component {\n    state = {\n\n    };\n\n    updateSuggestion = (event) => {\n        this.setState({\n            suggestion: event.target.value.charAt(0).toUpperCase() + event.target.value.slice(1)\n        });\n    };\n\n    updateTypeId = event => {\n        this.setState({\n            typeId: parseInt(event.target.value)\n        });\n    }\n\n\n    updateFavourite = () => {\n        this.setState({\n            favourite: 1\n        });\n    };\n\n    addSuggestion = (event) => {\n        event.preventDefault();\n\n        this.props.addSuggestionFunc(\n            this.state.suggestion,\n            this.state.typeId,\n            this.state.favourite\n        );\n\n        this.setState({\n            suggestion: \"\",\n            favourite: null,\n        })\n\n        event.currentTarget.suggestionText.value=\"\";\n    };\n\n\n    render() {\n        return (\n            <form onSubmit={this.addSuggestion}>\n                <fieldset>\n                    <div>\n                        <input\n                            type=\"text\"\n                            className=\"bottom-space\"\n                            name=\"suggestionText\"\n                            onChange={this.updateSuggestion} required\n\n                            placeholder=\"Enter your suggestion\"\n                        />\n                        <select\n                            className=\"left-space bottom-space\"\n                            onChange={this.updateTypeId} defaultValue=\"\" id=\"type\" name=\"type\">\n                            <option value=\"\" disabled>Choose your type</option>\n                            {this.props.types.map(type =>\n                                <option key={type.typeId} value={type.typeId}>{type.type}</option>)}\n\n                        </select>\n\n\n                        <div className=\"btn-group left-space\" role=\"group\" aria-label=\"Add Suggestion Buttons\">\n                            <button onClick={this.updateFavourite} type=\"button\" className=\"btn btn-outline-success btn-sm\"><i className=\"fa fa-heart\" aria-hidden=\"true\"></i></button>\n                            <button type=\"submit\" className=\"btn btn-outline-success btn-sm\"><i className=\"fa fa-check\" aria-hidden=\"true\"></i></button>\n                        </div>\n\n                    </div>\n                </fieldset>\n            </form>\n        )\n    }\n}\n\nexport default AddSuggestion;","import React from 'react';\nimport axios from \"axios\";\nimport './App.css';\nimport Header from \"./Header\";\nimport ChooseAType from \"./ChooseAType\";\nimport YourSuggestion from \"./YourSuggestion\";\nimport AddSuggestion from \"./AddSuggestion\";\n\n\nclass App extends React.Component {\n  state = {\n    suggestion: [],\n    types: [],\n    associations: [],\n    favourite: []\n  };\n\n  componentDidMount() {\n    axios.get(\"https://7i6d99wf8b.execute-api.eu-west-1.amazonaws.com/dev/types\")\n      .then((response) => {\n        const types = response.data.types;\n\n\n        console.log(types)\n\n        this.setState({\n          types: types\n        })\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }\n\n\n  /*getSuggestion = (typeId) => {\n    //axios.get(``) TODO\n    console.log(typeId);\n    const typeSuggestions = this.suggestions.filter(suggestion => suggestion.typeId === typeId);\n    console.log(typeSuggestions);\n    const suggestion = typeSuggestions[Math.ceil(Math.random()*typeSuggestions.length-1)];\n    this.setState({\n      typeId,\n      suggestion\n    });\n    console.log(typeId, suggestion);\n  }; */\n\n  getSuggestion = (typeId, favourite) => {\n\n    axios.get(\"https://7i6d99wf8b.execute-api.eu-west-1.amazonaws.com/dev/suggestion/\" + typeId + \"?favourite=\" + (favourite?1:0))\n      .then((response) => {\n        console.log(\"this is the response\", response);\n        const suggestion = response.data.suggestion;\n        console.log(\"this is the suggestion\", suggestion)\n        this.setState({\n          suggestion: suggestion,\n          associations: []\n        });\n      });\n  };\n\n  luckySuggestion = () => {\n\n    axios.get(\"https://7i6d99wf8b.execute-api.eu-west-1.amazonaws.com/dev/suggestion\")\n      .then((response) => {\n        console.log(\"this is the response\", response);\n        const suggestion = response.data.suggestion;\n        console.log(\"this is the suggestion\", suggestion)\n        this.setState({\n          suggestion: suggestion,\n          associations: []\n        });\n      })\n  };\n\n  getAssociation = () => {\n    const suggestion = this.state.suggestion.suggestion;\n\n    axios.get(`https://api.wordassociations.net/associations/v1.0/json/search?apikey=940e7dd9-d827-4d1d-9e71-703130c3357d&text=${suggestion}&lang=en&limit=6`)\n      .then((response) => {\n        console.log(\"this is the response\", response);\n        const associations = response.data.response[0].items.map(item => {\n          return item.item;\n        });\n        this.setState({\n          associations\n        });\n        console.log(associations);\n      });\n  };\n\n\n  addSuggestion = (suggestion, typeId, favourite) => {\n    console.log(\"Adding suggestion \", suggestion, typeId, favourite);\n    const newSuggestion = {\n      suggestion: suggestion,\n      typeId: typeId,\n      favourite: favourite\n    };\n\n    axios.post(\"https://7i6d99wf8b.execute-api.eu-west-1.amazonaws.com/dev/suggestion\", newSuggestion)\n      .then((response) => {\n        console.log(response);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n\n\n  deleteSuggestion = id => {\n    axios.delete(`https://7i6d99wf8b.execute-api.eu-west-1.amazonaws.com/dev/suggestion/${id}`)\n      .then((response) => {\n        // const filteredSuggestion = this.suggestion.filter(keepSuggestion => {\n        //   if (keepSuggestion.id !== id) return true;\n        //   else return false;\n        // });\n\n        // this.suggestion = filteredSuggestion\n        //    this.setState({\n        //      suggestion: \n        //    });\n        console.log(id);\n        console.log(response);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  addFavourite = (id, favourite) => {\n    axios.put(`https://7i6d99wf8b.execute-api.eu-west-1.amazonaws.com/dev/suggestion/${id}`, {\n      favourite\n    })\n      .then((response) => {\n        const filteredSuggestion = this.suggestion.map(favouriteSuggestion => {\n          if (favouriteSuggestion.id === id) {\n            favouriteSuggestion.favourite++;\n            console.log(favouriteSuggestion.favourite);\n          }\n          return favouriteSuggestion;\n        });\n\n        this.setState({\n          tasks: filteredSuggestion\n        });\n        console.log(response);\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n\n\n\n  render() {\n\n\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-12 col-sm-4\">\n              <div className=\"Logo\">\n                <h1>What's My App?</h1>\n                <div className=\"double-bottom-space\">\n                  <h6>Innovative Improvisation</h6>\n                </div>\n              </div>\n              <Header header=\"Choose your suggestion type\" />\n              <ChooseAType\n                types={this.state.types}\n                getSuggestion={this.getSuggestion}\n                luckySuggestion={this.luckySuggestion}\n              />\n\n\n            </div>\n            <div className=\"col-12 col-sm-4\">\n              <Header header=\"Your suggestion!\" />\n              <YourSuggestion\n                suggestion={this.state.suggestion}\n                associations={this.state.associations}\n                deleteSuggestionFunc={this.deleteSuggestion}\n                addFavouriteFunc={this.addFavourite}\n                getAssociationFunc={this.getAssociation}\n              />\n\n\n\n            </div>\n            <div className=\"col-12 col-sm-4\">\n              <Header header=\"Add a new suggestion\" />\n              <AddSuggestion types={this.state.types} addSuggestionFunc={this.addSuggestion} />\n\n\n\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}